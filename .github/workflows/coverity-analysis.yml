name: Coverity Scan
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      languages:
        description: "Languages to analyze"
        required: true
        default: "c-cpp"
jobs:
  coverity:
    runs-on: ubuntu-24.04
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install dependencies
        run: |
          # Update package lists and install required libraries for building and linking
          sudo apt update
          sudo apt install -y build-essential libcurl4-openssl-dev libssl-dev libmongoc-dev

      - name: Download and Install Coverity Tool
        run: |
          # Download and extract the Coverity analysis tool
          wget https://scan.coverity.com/download/linux64 \
            --post-data "token=${{ secrets.COVERITY_TOKEN }}&project=${{ github.repository }}" \
            -O coverity_tool.tgz
          mkdir coverity_tool
          tar -xvzf coverity_tool.tgz -C coverity_tool --strip-components=1
          export PATH=$PWD/coverity_tool/bin:$PATH
          echo "Coverity Tool installed successfully"

      - name: Build with Coverity
        run: |
          echo "ðŸ”Ž Compiling project (Coverity capture)..."
          mkdir -p build

          SRC_FILES=$(find . -type f -name "*.cpp" -print0 | xargs -0 -n1 printf "'%s' ")

          coverity_tool/bin/cov-build --dir cov-int g++ $SRC_FILES -o build/yrpreyc -Wall -O2 -lcurl -lssl -lmongoc-1.0

          echo "Capture summary (last lines of cov-int/build-log.txt):"
          tail -n 40 cov-int/build-log.txt || true




      - name: Compress with bzip2
        run: |
          # Compress the Coverity intermediate directory for upload
          tar cjvf myproject.tar.bz2 cov-int
        id: compress

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "coverity-scan-${{ github.run_id }}"
          release_name: "Coverity Scan Results"
          body: "Automated Coverity Scan Results"
          draft: false
          prerelease: false

      - name: Upload Asset to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: myproject.tar.bz2
          asset_name: myproject.tar.bz2
          asset_content_type: application/x-bzip2

      - name: Notify Coverity Scan
        run: |
          # Notify Coverity Scan service with the results
          curl --data "project=${{ github.repository }}&token=${{ secrets.COVERITY_TOKEN }}&email=cpp.benchmark@proton.me&url=https://github.com/${{ github.repository }}/releases/download/coverity-scan-${{ github.run_id }}/myproject.tar.bz2&version=1.0&description=Automated+Coverity+Scan" https://scan.coverity.com/builds