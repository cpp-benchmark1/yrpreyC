name: Coverity Scan
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      languages:
        description: "Languages to analyze"
        required: true
        default: "c-cpp"
jobs:
  coverity:
    runs-on: windows-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
        - language: c-cpp
          build-mode: manual
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Download and Install Coverity Tool
        shell: pwsh
        run: |
          # Download Coverity tool
          Invoke-WebRequest -Uri "https://scan.coverity.com/download/win64" -Method Post -Body "token=${{ secrets.COVERITY_TOKEN }}&project=${{ github.repository }}" -OutFile "coverity_tool.zip"
          
          # Create directory and extract
          New-Item -ItemType Directory -Path "coverity_tool" -Force | Out-Null
          Expand-Archive -Force coverity_tool.zip -DestinationPath "coverity_tool"
          
          # List contents to verify structure
          Write-Output "Contents of coverity_tool directory:"
          Get-ChildItem -Path "coverity_tool" -Recurse | Select-Object FullName
          
          # Find cov-build.exe in the extracted directory
          $covBuildPath = Get-ChildItem -Path "coverity_tool" -Recurse -Filter "cov-build.exe" | Select-Object -First 1 -ExpandProperty FullName
          
          if ($covBuildPath) {
            Write-Output "Found Coverity build tool at: $covBuildPath"
            # Add the directory containing cov-build.exe to PATH
            $covBuildDir = Split-Path -Parent $covBuildPath
            $env:Path = "$covBuildDir;$env:Path"
          } else {
            Write-Error "Coverity build tool not found in extracted files"
            Write-Output "Current directory structure:"
            Get-ChildItem -Path "coverity_tool" -Recurse | Format-Table -Property FullName
            exit 1
          }

      - name: Build with Coverity
        shell: pwsh
        run: |
          # Find cov-build.exe again to ensure we have the correct path
          $covBuildPath = Get-ChildItem -Path "coverity_tool" -Recurse -Filter "cov-build.exe" | Select-Object -First 1 -ExpandProperty FullName
          
          if (-not $covBuildPath) {
            Write-Error "Coverity build tool not found"
            exit 1
          }
          
          Write-Output "Using Coverity build tool at: $covBuildPath"
          
          # Build each directory
          Get-ChildItem -Directory | ForEach-Object {
            $CppFile = Get-ChildItem -Path $_.FullName -Filter *.cpp | Select-Object -First 1
            if ($CppFile) {
              Write-Output "Building $($CppFile.FullName)"
              & "$covBuildPath" --dir "cov-int" gcc $CppFile.FullName -o "$($_.Name).exe"
            }
          }

      - name: Compress with bzip2
        shell: pwsh
        run: |
          Compress-Archive -Path cov-int -DestinationPath myproject.zip
        id: compress

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "coverity-scan-${{ github.run_id }}"
          release_name: "Coverity Scan Results"
          body: "Automated Coverity Scan Results"
          draft: false
          prerelease: false

      - name: Upload Asset to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: myproject.zip
          asset_name: myproject.zip
          asset_content_type: application/x-bzip2

      - name: Notify Coverity Scan
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://scan.coverity.com/builds" -Method Post -Body @{
            project     = "${{ github.repository }}"
            token       = "${{ secrets.COVERITY_TOKEN }}"
            email       = "cpp.benchmark@proton.me"
            url         = "https://github.com/${{ github.repository }}/releases/download/coverity-scan-${{ github.run_id }}/myproject.zip"
            version     = "1.0"
            description = "Automated Coverity Scan"
          }